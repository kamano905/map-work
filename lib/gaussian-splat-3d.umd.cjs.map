{"version":3,"file":"gaussian-splat-3d.umd.cjs","sources":["../src/SplatBuffer.js","../src/PlyParser.js","../src/PlyLoader.js","../src/SplatLoader.js","../src/OrbitControls.js","../src/LoadingSpinner.js","../src/octree/OctreeNode.js","../src/octree/Octree.js","../src/worker/sorter.wasm","../src/Constants.js","../src/worker/SortWorker.js","../src/Viewer.js"],"sourcesContent":["import * as THREE from 'three';\n\nconst tempVector3A = new THREE.Vector3();\nconst tempVector3B = new THREE.Vector3();\nconst tempVector4A = new THREE.Vector4();\nconst tempVector4B = new THREE.Vector4();\nconst tempQuaternion4A = new THREE.Quaternion();\nconst tempQuaternion4B = new THREE.Quaternion();\n\nexport class SplatBuffer {\n\n    // Row format:\n    //     Center position (XYZ) - Float32 * 3\n    //     Scale (XYZ)  - Float32 * 3\n    //     Color (RGBA) - Uint8 * 4\n    //     Rotation (IJKW) - Float32 * 4\n\n    static PositionComponentCount = 3;\n    static ScaleComponentCount = 3;\n    static RotationComponentCount = 4;\n    static ColorComponentCount = 4;\n\n    static RowSizeBytes = 44;\n    static RowSizeFloats = 11;\n    static PositionSizeFloats = 3;\n    static PositionSizeBytes = 12;\n    static CovarianceSizeFloats = 6;\n    static CovarianceSizeBytes = 24;\n    static ColorSizeFloats = 4;\n    static ColorSizeBytes = 16;\n\n    static ScaleRowOffsetFloats = 3;\n    static ScaleRowOffsetBytes = 12;\n    static ColorRowOffsetBytes = 24;\n    static RotationRowOffsetFloats = 7;\n    static RotationRowOffsetBytes = 28;\n\n    constructor(bufferDataOrVertexCount) {\n        if (typeof bufferDataOrVertexCount === 'number') {\n            this.bufferData = new ArrayBuffer(SplatBuffer.RowSizeBytes * bufferDataOrVertexCount);\n            this.floatArray = new Float32Array(this.bufferData);\n            this.uint8Array = new Uint8Array(this.bufferData);\n            this.precomputedCovarianceBufferData = null;\n            this.precomputedColorBufferData = null;\n        } else {\n            this.bufferData = bufferDataOrVertexCount;\n            this.floatArray = new Float32Array(this.bufferData);\n            this.uint8Array = new Uint8Array(this.bufferData);\n            this.precomputedCovarianceBufferData = null;\n            this.precomputedColorBufferData = null;\n        }\n    }\n\n    optimize(minAlpha) {\n        let vertexCount = this.getVertexCount();\n        const oldVertexCount = vertexCount;\n        const oldByteCount = vertexCount * SplatBuffer.RowSizeBytes;\n\n        let index = 0;\n        while (index < vertexCount) {\n            const colorBase = SplatBuffer.RowSizeBytes * index + SplatBuffer.ColorRowOffsetBytes;\n            const baseAlpha = this.uint8Array[colorBase + 3];\n            if (baseAlpha <= minAlpha) {\n                this.swapVertices(index, vertexCount - 1);\n                vertexCount--;\n            } else {\n                index++;\n            }\n        }\n\n        const newByteCount = vertexCount * SplatBuffer.RowSizeBytes;\n\n        console.log('Splat buffer optimization');\n        console.log('-------------------------------');\n        console.log('Old vertex count: ' + oldVertexCount);\n        console.log('Old byte count: ' + oldByteCount);\n        console.log('New vertex count: ' + vertexCount);\n        console.log('New byte count: ' + newByteCount);\n        console.log('Splat count reduction: ' + ((oldByteCount - newByteCount) / oldByteCount * 100).toFixed(3) + '%');\n        console.log('==============================');\n        console.log('');\n\n        const newFloatArray = this.floatArray.slice(0, vertexCount * SplatBuffer.RowSizeFloats);\n        this.bufferData = newFloatArray.buffer;\n        this.floatArray = new Float32Array(this.bufferData);\n        this.uint8Array = new Uint8Array(this.bufferData);\n    }\n\n    buildPreComputedBuffers() {\n        const vertexCount = this.getVertexCount();\n\n        this.precomputedCovarianceBufferData = new ArrayBuffer(SplatBuffer.CovarianceSizeBytes * vertexCount);\n        const covarianceArray = new Float32Array(this.precomputedCovarianceBufferData);\n\n        this.precomputedColorBufferData = new ArrayBuffer(SplatBuffer.ColorSizeBytes * vertexCount);\n        const colorArray = new Float32Array(this.precomputedColorBufferData);\n\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n        const rotationMatrix = new THREE.Matrix3();\n        const scaleMatrix = new THREE.Matrix3();\n        const covarianceMatrix = new THREE.Matrix3();\n        const tempMatrix4 = new THREE.Matrix4();\n        for (let i = 0; i < vertexCount; i++) {\n\n            const colorBase = SplatBuffer.RowSizeBytes * i + SplatBuffer.ColorRowOffsetBytes;\n            colorArray[SplatBuffer.ColorSizeFloats * i] = this.uint8Array[colorBase] / 255;\n            colorArray[SplatBuffer.ColorSizeFloats * i + 1] = this.uint8Array[colorBase + 1] / 255;\n            colorArray[SplatBuffer.ColorSizeFloats * i + 2] = this.uint8Array[colorBase + 2] / 255;\n            colorArray[SplatBuffer.ColorSizeFloats * i + 3] = this.uint8Array[colorBase + 3] / 255;\n\n            const scaleBase = SplatBuffer.RowSizeFloats * i + SplatBuffer.ScaleRowOffsetFloats;\n            scale.set(this.floatArray[scaleBase], this.floatArray[scaleBase + 1], this.floatArray[scaleBase + 2]);\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\n            scaleMatrix.setFromMatrix4(tempMatrix4);\n\n            const rotationBase = SplatBuffer.RowSizeFloats * i + SplatBuffer.RotationRowOffsetFloats;\n            rotation.set(this.floatArray[rotationBase + 1],\n                         this.floatArray[rotationBase + 2],\n                         this.floatArray[rotationBase + 3],\n                         this.floatArray[rotationBase]);\n            tempMatrix4.makeRotationFromQuaternion(rotation);\n            rotationMatrix.setFromMatrix4(tempMatrix4);\n\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\n            const M = covarianceMatrix.elements;\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i] = M[0] * M[0] + M[3] * M[3] + M[6] * M[6];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 1] = M[0] * M[1] + M[3] * M[4] + M[6] * M[7];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 2] = M[0] * M[2] + M[3] * M[5] + M[6] * M[8];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 3] = M[1] * M[1] + M[4] * M[4] + M[7] * M[7];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 4] = M[1] * M[2] + M[4] * M[5] + M[7] * M[8];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 5] = M[2] * M[2] + M[5] * M[5] + M[8] * M[8];\n        }\n    }\n\n    getBufferData() {\n        return this.bufferData;\n    }\n\n    getPosition(index, outPosition = new THREE.Vector3()) {\n        const positionBase = SplatBuffer.RowSizeFloats * index;\n        outPosition.set(this.floatArray[positionBase], this.floatArray[positionBase + 1], this.floatArray[positionBase + 2]);\n        return outPosition;\n    }\n\n    setPosition(index, position) {\n        const positionBase = SplatBuffer.RowSizeFloats * index;\n        this.floatArray[positionBase] = position.x;\n        this.floatArray[positionBase + 1] = position.y;\n        this.floatArray[positionBase + 2] = position.z;\n    }\n\n    getScale(index, outScale = new THREE.Vector3()) {\n        const scaleBase = SplatBuffer.RowSizeFloats * index + SplatBuffer.ScaleRowOffsetFloats;\n        outScale.set(this.floatArray[scaleBase], this.floatArray[scaleBase + 1], this.floatArray[scaleBase + 2]);\n        return outScale;\n    }\n\n    setScale(index, scale) {\n        const scaleBase = SplatBuffer.RowSizeFloats * index + SplatBuffer.ScaleRowOffsetFloats;\n        this.floatArray[scaleBase] = scale.x;\n        this.floatArray[scaleBase + 1] = scale.y;\n        this.floatArray[scaleBase + 2] = scale.z;\n    }\n\n    getRotation(index, outRotation = new THREE.Quaternion()) {\n        const rotationBase = SplatBuffer.RowSizeFloats * index + SplatBuffer.RotationRowOffsetFloats;\n        outRotation.set(this.floatArray[rotationBase + 1], this.floatArray[rotationBase + 2],\n                        this.floatArray[rotationBase + 3], this.floatArray[rotationBase]);\n        return outRotation;\n    }\n\n    setRotation(index, rotation) {\n        const rotationBase = SplatBuffer.RowSizeFloats * index + SplatBuffer.RotationRowOffsetFloats;\n        this.floatArray[rotationBase] = rotation.w;\n        this.floatArray[rotationBase + 1] = rotation.x;\n        this.floatArray[rotationBase + 2] = rotation.y;\n        this.floatArray[rotationBase + 3] = rotation.z;\n    }\n\n    getColor(index, outColor = new THREE.Vector4()) {\n        const colorBase = SplatBuffer.RowSizeBytes * index + SplatBuffer.ColorRowOffsetBytes;\n        outColor.set(this.uint8Array[colorBase], this.uint8Array[colorBase + 1],\n                     this.uint8Array[colorBase + 2], this.uint8Array[colorBase + 3]);\n        return outColor;\n    }\n\n    setColor(index, color) {\n        const colorBase = SplatBuffer.RowSizeBytes * index + SplatBuffer.ColorRowOffsetBytes;\n        this.uint8Array[colorBase] = color.x;\n        this.uint8Array[colorBase + 1] = color.y;\n        this.uint8Array[colorBase + 2] = color.z;\n        this.uint8Array[colorBase + 3] = color.w;\n    }\n\n    getPrecomputedCovarianceBufferData() {\n        return this.precomputedCovarianceBufferData;\n    }\n\n    getPrecomputedColorBufferData() {\n        return this.precomputedColorBufferData;\n    }\n\n    getVertexCount() {\n        return this.bufferData.byteLength / SplatBuffer.RowSizeBytes;\n    }\n\n    fillPositionArray(outPositionArray) {\n        const vertexCount = this.getVertexCount();\n        for (let i = 0; i < vertexCount; i++) {\n            const outPositionBase = i * SplatBuffer.PositionComponentCount;\n            const srcPositionBase = SplatBuffer.RowSizeFloats * i;\n            outPositionArray[outPositionBase] = this.floatArray[srcPositionBase];\n            outPositionArray[outPositionBase + 1] = this.floatArray[srcPositionBase + 1];\n            outPositionArray[outPositionBase + 2] = this.floatArray[srcPositionBase + 2];\n        }\n    }\n\n    fillScaleArray(outScaleArray) {\n        const vertexCount = this.getVertexCount();\n        for (let i = 0; i < vertexCount; i++) {\n            const outScaleBase = i * SplatBuffer.ScaleComponentCount;\n            const srcScaleBase = SplatBuffer.RowSizeFloats * i + SplatBuffer.ScaleRowOffsetFloats;\n            outScaleArray[outScaleBase] = this.floatArray[srcScaleBase];\n            outScaleArray[outScaleBase + 1] = this.floatArray[srcScaleBase + 1];\n            outScaleArray[outScaleBase + 2] = this.floatArray[srcScaleBase + 2];\n        }\n    }\n\n    fillRotationArray(outRotationArray) {\n        const vertexCount = this.getVertexCount();\n        for (let i = 0; i < vertexCount; i++) {\n            const outRotationBase = i * SplatBuffer.RotationComponentCount;\n            const srcRotationBase = SplatBuffer.RowSizeFloats * i + SplatBuffer.RotationRowOffsetFloats;\n            outRotationArray[outRotationBase] = this.floatArray[srcRotationBase];\n            outRotationArray[outRotationBase + 1] = this.floatArray[srcRotationBase + 1];\n            outRotationArray[outRotationBase + 2] = this.floatArray[srcRotationBase + 2];\n            outRotationArray[outRotationBase + 3] = this.floatArray[srcRotationBase + 3];\n        }\n    }\n\n    fillColorArray(outColorArray) {\n        const vertexCount = this.getVertexCount();\n        for (let i = 0; i < vertexCount; i++) {\n            const outColorBase = i * SplatBuffer.ColorComponentCount;\n            const srcColorBase = SplatBuffer.RowSizeBytes * i + SplatBuffer.ColorRowOffsetBytes;\n            outColorArray[outColorBase] = this.uint8Array[srcColorBase];\n            outColorArray[outColorBase + 1] = this.uint8Array[srcColorBase + 1];\n            outColorArray[outColorBase + 2] = this.uint8Array[srcColorBase + 2];\n            outColorArray[outColorBase + 3] = this.uint8Array[srcColorBase + 3];\n        }\n    }\n\n    swapVertices(indexA, indexB) {\n\n        this.getPosition(indexA, tempVector3A);\n        this.getPosition(indexB, tempVector3B);\n        this.setPosition(indexB, tempVector3A);\n        this.setPosition(indexA, tempVector3B);\n\n        this.getScale(indexA, tempVector3A);\n        this.getScale(indexB, tempVector3B);\n        this.setScale(indexB, tempVector3A);\n        this.setScale(indexA, tempVector3B);\n\n        this.getRotation(indexA, tempQuaternion4A);\n        this.getRotation(indexB, tempQuaternion4B);\n        this.setRotation(indexB, tempQuaternion4A);\n        this.setRotation(indexA, tempQuaternion4B);\n\n        this.getColor(indexA, tempVector4A);\n        this.getColor(indexB, tempVector4B);\n        this.setColor(indexB, tempVector4A);\n        this.setColor(indexA, tempVector4B);\n\n    }\n\n    copyVertexFromSplatBuffer(otherSplatBuffer, srcIndex, destIndex) {\n        const srcArray = new Float32Array(otherSplatBuffer.bufferData, srcIndex * SplatBuffer.RowSizeBytes, SplatBuffer.RowSizeFloats);\n        const destArray = new Float32Array(this.bufferData, destIndex * SplatBuffer.RowSizeBytes, SplatBuffer.RowSizeFloats);\n        destArray.set(srcArray);\n    }\n\n}\n","import { SplatBuffer } from './SplatBuffer.js';\nimport * as THREE from 'three';\n\nexport class PlyParser {\n\n    constructor(plyBuffer) {\n        this.plyBuffer = plyBuffer;\n    }\n\n    decodeHeader(plyBuffer) {\n        const decoder = new TextDecoder();\n        let headerOffset = 0;\n        let headerText = '';\n\n        while (true) {\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, 50);\n            headerText += decoder.decode(headerChunk);\n            headerOffset += 50;\n            if (headerText.includes('end_header')) {\n                break;\n            }\n        }\n\n        const headerLines = headerText.split('\\n');\n\n        let vertexCount = 0;\n        let propertyTypes = {};\n\n        for (let i = 0; i < headerLines.length; i++) {\n            const line = headerLines[i].trim();\n            if (line.startsWith('element vertex')) {\n                const vertexCountMatch = line.match(/\\d+/);\n                if (vertexCountMatch) {\n                    vertexCount = parseInt(vertexCountMatch[0]);\n                }\n            } else if (line.startsWith('property')) {\n                const propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n                if (propertyMatch) {\n                    const propertyType = propertyMatch[2];\n                    const propertyName = propertyMatch[3];\n                    propertyTypes[propertyName] = propertyType;\n                }\n            } else if (line === 'end_header') {\n                break;\n            }\n        }\n\n        const vertexByteOffset = headerText.indexOf('end_header') + 'end_header'.length + 1;\n        const vertexData = new DataView(plyBuffer, vertexByteOffset);\n\n        return {\n            'vertexCount': vertexCount,\n            'propertyTypes': propertyTypes,\n            'vertexData': vertexData,\n            'headerOffset': headerOffset\n        };\n    }\n\n    readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, outVertex) {\n        let rawVertex = outVertex || {};\n        for (let property of propertiesToRead) {\n            const propertyType = propertyTypes[property];\n            if (propertyType === 'float') {\n                rawVertex[property] = vertexData.getFloat32(offset + fieldOffsets[property], true);\n            } else if (propertyType === 'uchar') {\n                rawVertex[property] = vertexData.getUint8(offset + fieldOffsets[property]) / 255.0;\n            }\n        }\n    }\n\n    parseToSplatBuffer() {\n\n        console.time('PLY load');\n\n        const {vertexCount, propertyTypes, vertexData} = this.decodeHeader(this.plyBuffer);\n\n        // figure out the SH degree from the number of coefficients\n        let nRestCoeffs = 0;\n        for (const propertyName in propertyTypes) {\n            if (propertyName.startsWith('f_rest_')) {\n                nRestCoeffs += 1;\n            }\n        }\n        const nCoeffsPerColor = nRestCoeffs / 3;\n\n        // TODO: Eventually properly support multiple degree spherical harmonics\n        // const sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\n        const sphericalHarmonicsDegree = 0;\n\n        console.log('Detected degree', sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\n\n        // figure out the order in which spherical harmonics should be read\n        const shFeatureOrder = [];\n        for (let rgb = 0; rgb < 3; ++rgb) {\n            shFeatureOrder.push(`f_dc_${rgb}`);\n        }\n        for (let i = 0; i < nCoeffsPerColor; ++i) {\n            for (let rgb = 0; rgb < 3; ++rgb) {\n                shFeatureOrder.push(`f_rest_${rgb * nCoeffsPerColor + i}`);\n            }\n        }\n\n        let plyRowSize = 0;\n        let fieldOffsets = {};\n        const fieldSize = {\n            'double': 8,\n            'int': 4,\n            'uint': 4,\n            'float': 4,\n            'short': 2,\n            'ushort': 2,\n            'uchar': 1,\n        };\n        for (let fieldName in propertyTypes) {\n            if (propertyTypes.hasOwnProperty(fieldName)) {\n                const type = propertyTypes[fieldName];\n                fieldOffsets[fieldName] = plyRowSize;\n                plyRowSize += fieldSize[type];\n            }\n        }\n\n        let rawVertex = {};\n\n        const propertiesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\n                                  'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity'];\n\n        console.time('Importance computations');\n        let sizeList = new Float32Array(vertexCount);\n        let sizeIndex = new Uint32Array(vertexCount);\n        for (let row = 0; row < vertexCount; row++) {\n            this.readRawVertexFast(vertexData, row * plyRowSize, fieldOffsets, propertiesToRead, propertyTypes, rawVertex);\n            sizeIndex[row] = row;\n            if (!propertyTypes['scale_0']) continue;\n            const size = Math.exp(rawVertex.scale_0) * Math.exp(rawVertex.scale_1) * Math.exp(rawVertex.scale_2);\n            const opacity = 1 / (1 + Math.exp(-rawVertex.opacity));\n            sizeList[row] = size * opacity;\n        }\n        console.timeEnd('Importance computations');\n\n        console.time('Importance sort');\n        sizeIndex.sort((b, a) => sizeList[a] - sizeList[b]);\n        console.timeEnd('Importance sort');\n\n\n        const splatBufferData = new ArrayBuffer(SplatBuffer.RowSizeBytes * vertexCount);\n\n        for (let j = 0; j < vertexCount; j++) {\n            const row = sizeIndex[j];\n            const offset = row * plyRowSize;\n            this.readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, rawVertex);\n            const position = new Float32Array(splatBufferData, j * SplatBuffer.RowSizeBytes, 3);\n            const scales = new Float32Array(splatBufferData, j * SplatBuffer.RowSizeBytes + SplatBuffer.ScaleRowOffsetBytes, 3);\n            const rgba = new Uint8ClampedArray(splatBufferData, j * SplatBuffer.RowSizeBytes + SplatBuffer.ColorRowOffsetBytes, 4,);\n            const rot = new Float32Array(splatBufferData, j * SplatBuffer.RowSizeBytes + SplatBuffer.RotationRowOffsetBytes, 4);\n\n            if (propertyTypes['scale_0']) {\n                const quat = new THREE.Quaternion(rawVertex.rot_1, rawVertex.rot_2, rawVertex.rot_3, rawVertex.rot_0);\n                quat.normalize();\n                rot.set([quat.w, quat.x, quat.y, quat.z]);\n                scales.set([Math.exp(rawVertex.scale_0), Math.exp(rawVertex.scale_1), Math.exp(rawVertex.scale_2)]);\n            } else {\n                scales.set([0.01, 0.01, 0.01]);\n                rot.set([1.0, 0.0, 0.0, 0.0]);\n            }\n\n            position.set([rawVertex.x, rawVertex.y, rawVertex.z]);\n\n            if (propertyTypes['f_dc_0']) {\n                const SH_C0 = 0.28209479177387814;\n                rgba.set([(0.5 + SH_C0 * rawVertex.f_dc_0) * 255,\n                          (0.5 + SH_C0 * rawVertex.f_dc_1) * 255,\n                          (0.5 + SH_C0 * rawVertex.f_dc_2) * 255]);\n            } else {\n                rgba.set([255, 0, 0]);\n            }\n            if (propertyTypes['opacity']) {\n                rgba[3] = (1 / (1 + Math.exp(-rawVertex.opacity))) * 255;\n            } else {\n                rgba[3] = 255;\n            }\n        }\n\n        console.timeEnd('PLY load');\n\n        const splatBuffer = new SplatBuffer(splatBufferData);\n        return splatBuffer;\n\n    }\n}\n","import { PlyParser } from './PlyParser.js';\n\nexport class PlyLoader {\n\n    constructor() {\n        this.splatBuffer = null;\n    }\n\n    fetchFile(fileName) {\n        return new Promise((resolve, reject) => {\n            fetch(fileName)\n            .then((res) => {\n                return res.arrayBuffer();\n            })\n            .then((data) => {\n                resolve(data);\n            })\n            .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n    loadFromFile(fileName) {\n        return new Promise((resolve, reject) => {\n            const loadPromise = this.fetchFile(fileName);\n            loadPromise\n            .then((plyFileData) => {\n                const plyParser = new PlyParser(plyFileData);\n                const splatBuffer = plyParser.parseToSplatBuffer();\n                this.splatBuffer = splatBuffer;\n                resolve(splatBuffer);\n            })\n            .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n}\n","import { SplatBuffer } from './SplatBuffer.js';\n\nexport class SplatLoader {\n\n    constructor(splatBuffer = null) {\n        this.splatBuffer = splatBuffer;\n        this.downLoadLink = null;\n    }\n\n    loadFromFile(fileName) {\n        return new Promise((resolve, reject) => {\n            fetch(fileName)\n            .then((res) => {\n                return res.arrayBuffer();\n            })\n            .then((bufferData) => {\n                const splatBuffer = new SplatBuffer(bufferData);\n                resolve(splatBuffer);\n            })\n            .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n    setFromBuffer(splatBuffer) {\n        this.splatBuffer = splatBuffer;\n    }\n\n    saveToFile(fileName) {\n        const splatData = new Uint8Array(this.splatBuffer.getBufferData());\n        const blob = new Blob([splatData.buffer], {\n            type: 'application/octet-stream',\n        });\n\n        if (!this.downLoadLink) {\n            this.downLoadLink = document.createElement('a');\n            document.body.appendChild(this.downLoadLink);\n        }\n        this.downLoadLink.download = fileName;\n        this.downLoadLink.href = URL.createObjectURL(blob);\n        this.downLoadLink.click();\n    }\n\n}\n","import {\n    EventDispatcher,\n    MOUSE,\n    Quaternion,\n    Spherical,\n    TOUCH,\n    Vector2,\n    Vector3,\n    Plane,\n    Ray,\n    MathUtils\n} from 'three';\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\n\nclass OrbitControls extends EventDispatcher {\n\n    constructor( object, domElement ) {\n\n        super();\n\n        this.object = object;\n        this.domElement = domElement;\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n        // Set to false to disable this control\n        this.enabled = true;\n\n        // \"target\" sets the location of focus, where the object orbits around\n        this.target = new Vector3();\n\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        this.minDistance = 0;\n        this.maxDistance = Infinity;\n\n        // How far you can zoom in and out ( OrthographicCamera only )\n        this.minZoom = 0;\n        this.maxZoom = Infinity;\n\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        this.minPolarAngle = 0; // radians\n        this.maxPolarAngle = Math.PI; // radians\n\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\n        this.minAzimuthAngle = - Infinity; // radians\n        this.maxAzimuthAngle = Infinity; // radians\n\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        this.enableDamping = false;\n        this.dampingFactor = 0.05;\n\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        this.enableZoom = true;\n        this.zoomSpeed = 1.0;\n\n        // Set to false to disable rotating\n        this.enableRotate = true;\n        this.rotateSpeed = 1.0;\n\n        // Set to false to disable panning\n        this.enablePan = true;\n        this.panSpeed = 1.0;\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n        this.zoomToCursor = false;\n\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        this.autoRotate = false;\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n        // The four arrow keys\n        this.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };\n\n        // Mouse buttons\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n        // Touch fingers\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n        // for reset\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n\n        // the target DOM element for key events\n        this._domElementKeyEvents = null;\n\n        //\n        // public methods\n        //\n\n        this.getPolarAngle = function() {\n\n            return spherical.phi;\n\n        };\n\n        this.getAzimuthalAngle = function() {\n\n            return spherical.theta;\n\n        };\n\n        this.getDistance = function() {\n\n            return this.object.position.distanceTo( this.target );\n\n        };\n\n        this.listenToKeyEvents = function( domElement ) {\n\n            domElement.addEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = domElement;\n\n        };\n\n        this.stopListenToKeyEvents = function() {\n\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = null;\n\n        };\n\n        this.saveState = function() {\n\n            scope.target0.copy( scope.target );\n            scope.position0.copy( scope.object.position );\n            scope.zoom0 = scope.object.zoom;\n\n        };\n\n        this.reset = function() {\n\n            scope.target.copy( scope.target0 );\n            scope.object.position.copy( scope.position0 );\n            scope.object.zoom = scope.zoom0;\n\n            scope.object.updateProjectionMatrix();\n            scope.dispatchEvent( _changeEvent );\n\n            scope.update();\n\n            state = STATE.NONE;\n\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        this.update = function() {\n\n            const offset = new Vector3();\n\n            // so camera.up is the orbit axis\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n            const quatInverse = quat.clone().invert();\n\n            const lastPosition = new Vector3();\n            const lastQuaternion = new Quaternion();\n            const lastTargetPosition = new Vector3();\n\n            const twoPI = 2 * Math.PI;\n\n            return function update() {\n\n                const position = scope.object.position;\n\n                offset.copy( position ).sub( scope.target );\n\n                // rotate offset to \"y-axis-is-up\" space\n                offset.applyQuaternion( quat );\n\n                // angle from z-axis around y-axis\n                spherical.setFromVector3( offset );\n\n                if ( scope.autoRotate && state === STATE.NONE ) {\n\n                    rotateLeft( getAutoRotationAngle() );\n\n                }\n\n                if ( scope.enableDamping ) {\n\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n                } else {\n\n                    spherical.theta += sphericalDelta.theta;\n                    spherical.phi += sphericalDelta.phi;\n\n                }\n\n                // restrict theta to be between desired limits\n\n                let min = scope.minAzimuthAngle;\n                let max = scope.maxAzimuthAngle;\n\n                if ( isFinite( min ) && isFinite( max ) ) {\n\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n                    if ( min <= max ) {\n\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n                    } else {\n\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n                            Math.max( min, spherical.theta ) :\n                            Math.min( max, spherical.theta );\n\n                    }\n\n                }\n\n                // restrict phi to be between desired limits\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n                spherical.makeSafe();\n\n\n                // move target to panned location\n\n                if ( scope.enableDamping === true ) {\n\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n                } else {\n\n                    scope.target.add( panOffset );\n\n                }\n\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n                // we adjust zoom later in these cases\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\n\n                    spherical.radius = clampDistance( spherical.radius );\n\n                } else {\n\n                    spherical.radius = clampDistance( spherical.radius * scale );\n\n                }\n\n\n                offset.setFromSpherical( spherical );\n\n                // rotate offset back to \"camera-up-vector-is-up\" space\n                offset.applyQuaternion( quatInverse );\n\n                position.copy( scope.target ).add( offset );\n\n                scope.object.lookAt( scope.target );\n\n                if ( scope.enableDamping === true ) {\n\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n                } else {\n\n                    sphericalDelta.set( 0, 0, 0 );\n\n                    panOffset.set( 0, 0, 0 );\n\n                }\n\n                // adjust camera position\n                let zoomChanged = false;\n                if ( scope.zoomToCursor && performCursorZoom ) {\n\n                    let newRadius = null;\n                    if ( scope.object.isPerspectiveCamera ) {\n\n                        // move the camera down the pointer ray\n                        // this method avoids floating point error\n                        const prevRadius = offset.length();\n                        newRadius = clampDistance( prevRadius * scale );\n\n                        const radiusDelta = prevRadius - newRadius;\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\n                        scope.object.updateMatrixWorld();\n\n                    } else if ( scope.object.isOrthographicCamera ) {\n\n                        // adjust the ortho camera position based on zoom changes\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseBefore.unproject( scope.object );\n\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                        scope.object.updateProjectionMatrix();\n                        zoomChanged = true;\n\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseAfter.unproject( scope.object );\n\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\n                        scope.object.updateMatrixWorld();\n\n                        newRadius = offset.length();\n\n                    } else {\n\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\n                        scope.zoomToCursor = false;\n\n                    }\n\n                    // handle the placement of the target\n                    if ( newRadius !== null ) {\n\n                        if ( this.screenSpacePanning ) {\n\n                            // position the orbit target in front of the new camera position\n                            scope.target.set( 0, 0, - 1 )\n                                .transformDirection( scope.object.matrix )\n                                .multiplyScalar( newRadius )\n                                .add( scope.object.position );\n\n                        } else {\n\n                            // get the ray and translation plane to compute target\n                            _ray.origin.copy( scope.object.position );\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\n\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n                            // extremely large values\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\n\n                                object.lookAt( scope.target );\n\n                            } else {\n\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\n                                _ray.intersectPlane( _plane, scope.target );\n\n                            }\n\n                        }\n\n                    }\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                    scope.object.updateProjectionMatrix();\n                    zoomChanged = true;\n\n                }\n\n                scale = 1;\n                performCursorZoom = false;\n\n                // update condition is:\n                // min(camera displacement, camera rotation in radians)^2 > EPS\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n                if ( zoomChanged ||\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\n\n                    scope.dispatchEvent( _changeEvent );\n\n                    lastPosition.copy( scope.object.position );\n                    lastQuaternion.copy( scope.object.quaternion );\n                    lastTargetPosition.copy( scope.target );\n\n                    zoomChanged = false;\n\n                    return true;\n\n                }\n\n                return false;\n\n            };\n\n        }();\n\n        this.dispose = function() {\n\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\n            if ( scope._domElementKeyEvents !== null ) {\n\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n                scope._domElementKeyEvents = null;\n\n            }\n\n        };\n\n        //\n        // internals\n        //\n\n        const scope = this;\n\n        const STATE = {\n            NONE: - 1,\n            ROTATE: 0,\n            DOLLY: 1,\n            PAN: 2,\n            TOUCH_ROTATE: 3,\n            TOUCH_PAN: 4,\n            TOUCH_DOLLY_PAN: 5,\n            TOUCH_DOLLY_ROTATE: 6\n        };\n\n        let state = STATE.NONE;\n\n        const EPS = 0.000001;\n\n        // current position in spherical coordinates\n        const spherical = new Spherical();\n        const sphericalDelta = new Spherical();\n\n        let scale = 1;\n        const panOffset = new Vector3();\n\n        const rotateStart = new Vector2();\n        const rotateEnd = new Vector2();\n        const rotateDelta = new Vector2();\n\n        const panStart = new Vector2();\n        const panEnd = new Vector2();\n        const panDelta = new Vector2();\n\n        const dollyStart = new Vector2();\n        const dollyEnd = new Vector2();\n        const dollyDelta = new Vector2();\n\n        const dollyDirection = new Vector3();\n        const mouse = new Vector2();\n        let performCursorZoom = false;\n\n        const pointers = [];\n        const pointerPositions = {};\n\n        function getAutoRotationAngle() {\n\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n        }\n\n        function getZoomScale() {\n\n            return Math.pow( 0.95, scope.zoomSpeed );\n\n        }\n\n        function rotateLeft( angle ) {\n\n            sphericalDelta.theta -= angle;\n\n        }\n\n        function rotateUp( angle ) {\n\n            sphericalDelta.phi -= angle;\n\n        }\n\n        const panLeft = function() {\n\n            const v = new Vector3();\n\n            return function panLeft( distance, objectMatrix ) {\n\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n                v.multiplyScalar( - distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        const panUp = function() {\n\n            const v = new Vector3();\n\n            return function panUp( distance, objectMatrix ) {\n\n                if ( scope.screenSpacePanning === true ) {\n\n                    v.setFromMatrixColumn( objectMatrix, 1 );\n\n                } else {\n\n                    v.setFromMatrixColumn( objectMatrix, 0 );\n                    v.crossVectors( scope.object.up, v );\n\n                }\n\n                v.multiplyScalar( distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        const pan = function() {\n\n            const offset = new Vector3();\n\n            return function pan( deltaX, deltaY ) {\n\n                const element = scope.domElement;\n\n                if ( scope.object.isPerspectiveCamera ) {\n\n                    // perspective\n                    const position = scope.object.position;\n                    offset.copy( position ).sub( scope.target );\n                    let targetDistance = offset.length();\n\n                    // half of the fov is center to top of screen\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n                    // we use only clientHeight here so aspect ratio does not distort speed\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    // orthographic\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\n                                      element.clientHeight, scope.object.matrix );\n\n                } else {\n\n                    // camera neither orthographic nor perspective\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n                    scope.enablePan = false;\n\n                }\n\n            };\n\n        }();\n\n        function dollyOut( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale /= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function dollyIn( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale *= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function updateMouseParameters( event ) {\n\n            if ( ! scope.zoomToCursor ) {\n\n                return;\n\n            }\n\n            performCursorZoom = true;\n\n            const rect = scope.domElement.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            const w = rect.width;\n            const h = rect.height;\n\n            mouse.x = ( x / w ) * 2 - 1;\n            mouse.y = - ( y / h ) * 2 + 1;\n\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\n\n        }\n\n        function clampDistance( dist ) {\n\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\n\n        }\n\n        //\n        // event callbacks - update the object state\n        //\n\n        function handleMouseDownRotate( event ) {\n\n            rotateStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownDolly( event ) {\n\n            updateMouseParameters( event );\n            dollyStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownPan( event ) {\n\n            panStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseMoveRotate( event ) {\n\n            rotateEnd.set( event.clientX, event.clientY );\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMoveDolly( event ) {\n\n            dollyEnd.set( event.clientX, event.clientY );\n\n            dollyDelta.subVectors( dollyEnd, dollyStart );\n\n            if ( dollyDelta.y > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            } else if ( dollyDelta.y < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            }\n\n            dollyStart.copy( dollyEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMovePan( event ) {\n\n            panEnd.set( event.clientX, event.clientY );\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseWheel( event ) {\n\n            updateMouseParameters( event );\n\n            if ( event.deltaY < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            } else if ( event.deltaY > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            }\n\n            scope.update();\n\n        }\n\n        function handleKeyDown( event ) {\n\n            let needsUpdate = false;\n\n            switch ( event.code ) {\n\n                case scope.keys.UP:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.BOTTOM:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, - scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.LEFT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.RIGHT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( - scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n            }\n\n            if ( needsUpdate ) {\n\n                // prevent the browser from scrolling on cursor keys\n                event.preventDefault();\n\n                scope.update();\n\n            }\n\n\n        }\n\n        function handleTouchStartRotate() {\n\n            if ( pointers.length === 1 ) {\n\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                rotateStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartPan() {\n\n            if ( pointers.length === 1 ) {\n\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                panStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartDolly() {\n\n            const dx = pointers[0].pageX - pointers[1].pageX;\n            const dy = pointers[0].pageY - pointers[1].pageY;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyStart.set( 0, distance );\n\n        }\n\n        function handleTouchStartDollyPan() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enablePan ) handleTouchStartPan();\n\n        }\n\n        function handleTouchStartDollyRotate() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enableRotate ) handleTouchStartRotate();\n\n        }\n\n        function handleTouchMoveRotate( event ) {\n\n            if ( pointers.length == 1 ) {\n\n                rotateEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                rotateEnd.set( x, y );\n\n            }\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n        }\n\n        function handleTouchMovePan( event ) {\n\n            if ( pointers.length === 1 ) {\n\n                panEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                panEnd.set( x, y );\n\n            }\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n        }\n\n        function handleTouchMoveDolly( event ) {\n\n            const position = getSecondPointerPosition( event );\n\n            const dx = event.pageX - position.x;\n            const dy = event.pageY - position.y;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyEnd.set( 0, distance );\n\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n            dollyOut( dollyDelta.y );\n\n            dollyStart.copy( dollyEnd );\n\n        }\n\n        function handleTouchMoveDollyPan( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enablePan ) handleTouchMovePan( event );\n\n        }\n\n        function handleTouchMoveDollyRotate( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        function onPointerDown( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.setPointerCapture( event.pointerId );\n\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            //\n\n            addPointer( event );\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchStart( event );\n\n            } else {\n\n                onMouseDown( event );\n\n            }\n\n        }\n\n        function onPointerMove( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchMove( event );\n\n            } else {\n\n                onMouseMove( event );\n\n            }\n\n        }\n\n        function onPointerUp( event ) {\n\n            removePointer( event );\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.releasePointerCapture( event.pointerId );\n\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            scope.dispatchEvent( _endEvent );\n\n            state = STATE.NONE;\n\n        }\n\n        function onMouseDown( event ) {\n\n            let mouseAction;\n\n            switch ( event.button ) {\n\n                case 0:\n\n                    mouseAction = scope.mouseButtons.LEFT;\n                    break;\n\n                case 1:\n\n                    mouseAction = scope.mouseButtons.MIDDLE;\n                    break;\n\n                case 2:\n\n                    mouseAction = scope.mouseButtons.RIGHT;\n                    break;\n\n                default:\n\n                    mouseAction = - 1;\n\n            }\n\n            switch ( mouseAction ) {\n\n                case MOUSE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseDownDolly( event );\n\n                    state = STATE.DOLLY;\n\n                    break;\n\n                case MOUSE.ROTATE:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    } else {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    }\n\n                    break;\n\n                case MOUSE.PAN:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    } else {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onMouseMove( event ) {\n\n            switch ( state ) {\n\n                case STATE.ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleMouseMoveRotate( event );\n\n                    break;\n\n                case STATE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseMoveDolly( event );\n\n                    break;\n\n                case STATE.PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleMouseMovePan( event );\n\n                    break;\n\n            }\n\n        }\n\n        function onMouseWheel( event ) {\n\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\n\n            event.preventDefault();\n\n            scope.dispatchEvent( _startEvent );\n\n            handleMouseWheel( event );\n\n            scope.dispatchEvent( _endEvent );\n\n        }\n\n        function onKeyDown( event ) {\n\n            if ( scope.enabled === false || scope.enablePan === false ) return;\n\n            handleKeyDown( event );\n\n        }\n\n        function onTouchStart( event ) {\n\n            trackPointer( event );\n\n            switch ( pointers.length ) {\n\n                case 1:\n\n                    switch ( scope.touches.ONE ) {\n\n                        case TOUCH.ROTATE:\n\n                            if ( scope.enableRotate === false ) return;\n\n                            handleTouchStartRotate();\n\n                            state = STATE.TOUCH_ROTATE;\n\n                            break;\n\n                        case TOUCH.PAN:\n\n                            if ( scope.enablePan === false ) return;\n\n                            handleTouchStartPan();\n\n                            state = STATE.TOUCH_PAN;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                case 2:\n\n                    switch ( scope.touches.TWO ) {\n\n                        case TOUCH.DOLLY_PAN:\n\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                            handleTouchStartDollyPan();\n\n                            state = STATE.TOUCH_DOLLY_PAN;\n\n                            break;\n\n                        case TOUCH.DOLLY_ROTATE:\n\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                            handleTouchStartDollyRotate();\n\n                            state = STATE.TOUCH_DOLLY_ROTATE;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onTouchMove( event ) {\n\n            trackPointer( event );\n\n            switch ( state ) {\n\n                case STATE.TOUCH_ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleTouchMoveRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleTouchMovePan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_PAN:\n\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                    handleTouchMoveDollyPan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_ROTATE:\n\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                    handleTouchMoveDollyRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n        }\n\n        function onContextMenu( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            event.preventDefault();\n\n        }\n\n        function addPointer( event ) {\n\n            pointers.push( event );\n\n        }\n\n        function removePointer( event ) {\n\n            delete pointerPositions[event.pointerId];\n\n            for ( let i = 0; i < pointers.length; i ++ ) {\n\n                if ( pointers[i].pointerId == event.pointerId ) {\n\n                    pointers.splice( i, 1 );\n                    return;\n\n                }\n\n            }\n\n        }\n\n        function trackPointer( event ) {\n\n            let position = pointerPositions[event.pointerId];\n\n            if ( position === undefined ) {\n\n                position = new Vector2();\n                pointerPositions[event.pointerId] = position;\n\n            }\n\n            position.set( event.pageX, event.pageY );\n\n        }\n\n        function getSecondPointerPosition( event ) {\n\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\n\n            return pointerPositions[pointer.pointerId];\n\n        }\n\n        //\n\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\n\n        // force an update at start\n\n        this.update();\n\n    }\n\n}\n\nexport { OrbitControls };\n","export class LoadingSpinner {\n\n    constructor(message) {\n        this.message = message || 'Loading...';\n\n        this.spinnerDivContainer = document.createElement('div');\n        this.spinnerDiv = document.createElement('div');\n        this.messageDiv = document.createElement('div');\n        this.spinnerDivContainer.className = 'loaderContainer';\n        this.spinnerDiv.className = 'loader';\n        this.spinnerDivContainer.style.display = 'none';\n        this.messageDiv.className = 'message';\n        this.messageDiv.innerHTML = this.message;\n        this.spinnerDivContainer.appendChild(this.spinnerDiv);\n        this.spinnerDivContainer.appendChild(this.messageDiv);\n        document.body.appendChild(this.spinnerDivContainer);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .message {\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                padding-top:15px;\n            }\n\n            .loaderContainer {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-60px, -60px);\n                width: 120px;\n            }\n\n            .loader {\n                width: 120px;        /* the size */\n                padding: 15px;       /* the border thickness */\n                background: #07e8d6; /* the color */\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `;\n        document.getElementsByTagName('head')[0].appendChild(style);\n    }\n\n    show() {\n        this.spinnerDivContainer.style.display = 'block';\n    }\n\n    hide() {\n        this.spinnerDivContainer.style.display = 'none';\n    }\n}\n","import * as THREE from 'three';\n\nlet idGen = 0;\n\nexport class OctreeNode {\n\n    constructor(min, max, depth, id) {\n        this.min = new THREE.Vector3().copy(min);\n        this.max = new THREE.Vector3().copy(max);\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\n        this.depth = depth;\n        this.children = [];\n        this.data = null;\n        this.id = id || idGen++;\n    }\n\n}\n","import * as THREE from 'three';\nimport { OctreeNode } from './OctreeNode.js';\n\nexport class Octree {\n\n    constructor(maxDepth, maxPositionsPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxPositionsPerNode = maxPositionsPerNode;\n        this.sceneDimensions = new THREE.Vector3();\n        this.sceneMin = new THREE.Vector3();\n        this.sceneMax = new THREE.Vector3();\n        this.rootNode = null;\n        this.addedIndexes = {};\n        this.nodesWithIndexes = [];\n    }\n\n    processScene(splatBuffer) {\n        this.nodesWithIndexes = [];\n        const vertexCount = splatBuffer.getVertexCount();\n\n        const position = new THREE.Vector3();\n        for (let i = 0; i < vertexCount; i++) {\n            splatBuffer.getPosition(i, position);\n            if (i === 0 || position.x < this.sceneMin.x) this.sceneMin.x = position.x;\n            if (i === 0 || position.x > this.sceneMax.x) this.sceneMax.x = position.x;\n            if (i === 0 || position.y < this.sceneMin.y) this.sceneMin.y = position.y;\n            if (i === 0 || position.y > this.sceneMax.y) this.sceneMax.y = position.y;\n            if (i === 0 || position.z < this.sceneMin.z) this.sceneMin.z = position.z;\n            if (i === 0 || position.z > this.sceneMax.z) this.sceneMax.z = position.z;\n        }\n\n        this.sceneDimensions.copy(this.sceneMin).sub(this.sceneMin);\n\n        const indexes = [];\n        for (let i = 0; i < vertexCount; i ++)indexes.push(i);\n        this.rootNode = new OctreeNode(this.sceneMin, this.sceneMax, 0);\n        this.rootNode.data = {\n            'indexes': indexes\n        };\n        this.processNode(this.rootNode, splatBuffer);\n    }\n\n    processNode(node, splatBuffer) {\n        const vertexCount = node.data.indexes.length;\n\n        if (vertexCount < this.maxPositionsPerNode || node.depth > this.maxDepth) {\n            for (let i = 0; i < node.data.indexes.length; i++) {\n                if (this.addedIndexes[node.data.indexes[i]]) {\n                    node.data.indexes.splice(i, 1);\n                } else {\n                    this.addedIndexes[node.data.indexes[i]] = true;\n                }\n            }\n            this.nodesWithIndexes.push(node);\n            return;\n        }\n\n        const nodeDimensions = new THREE.Vector3().copy(node.max).sub(node.min);\n        const halfDimensions = new THREE.Vector3().copy(nodeDimensions).multiplyScalar(0.5);\n\n        const nodeCenter = new THREE.Vector3().copy(node.min).add(halfDimensions);\n\n        const childrenBounds = [\n            // top section, clockwise from upper-left (looking from above, +Y)\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x,\n                                             nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z ),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\n\n            // bottom section, clockwise from lower-left (looking from above, +Y)\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x,\n                                             nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\n        ];\n\n        const vertexCounts = [];\n        const baseIndexes = [];\n        for (let i = 0; i < childrenBounds.length; i++) {\n            vertexCounts[i] = 0;\n            baseIndexes[i] = [];\n        }\n\n        const position = new THREE.Vector3();\n        for (let i = 0; i < vertexCount; i++) {\n            const splatIndex = node.data.indexes[i];\n            splatBuffer.getPosition(splatIndex, position);\n            for (let j = 0; j < childrenBounds.length; j++) {\n                if (childrenBounds[j].containsPoint(position)) {\n                    vertexCounts[j]++;\n                    baseIndexes[j].push(splatIndex);\n                }\n            }\n        }\n\n        for (let i = 0; i < childrenBounds.length; i++) {\n            const childNode = new OctreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\n            childNode.data = {\n                'indexes': baseIndexes[i]\n            };\n            node.children.push(childNode);\n        }\n\n        node.data = {};\n        for (let child of node.children) {\n            this.processNode(child, splatBuffer);\n        }\n    }\n\n\n    countLeaves() {\n\n        let leafCount = 0;\n        this.visitLeaves(() => {\n            leafCount++;\n        });\n\n        return leafCount;\n    }\n\n    visitLeaves(visitFunc) {\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        return visitLeavesFromNode(this.rootNode, visitFunc);\n    }\n}\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\f\u0006dylink\u0000\u0000\u0000\u0000\u0000\u0001\u0017\u0003`\u0000\u0000`\f}}}\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u00079\u0003\u0011__wasm_call_ctors\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0004\u0003\u0003\u0000\u0001\u000b�\u0003\u0001\u0004\u0002@ \t\u0004@A����\u0007!\u000eA����x!\f\u0003@ \u0002 \u000fA\u0002t\"\rj \u0001 \u0000 \rj(\u0002\u0000A\flj\"\r(\u0002\u0004 \u0003(\u0002\u0018l \r(\u0002\u0000 \u0003(\u0002\blj \r(\u0002\b \u0003(\u0002(lj\"\r6\u0002\u0000 \r \u000e \r \u000eH\u001b!\u000e \r \f \f \rH\u001b!\f \u000fA\u0001j\"\u000f \tG\r\u0000\u000b \u0002 \u000bA\u0002tj!\u0003 \b� \f� \u000e���!\u0005 \tE\r\u0001A\u0000!\u0001\u0003@ \u0003\u0002 \u0005 \u0002 \u0001A\u0002tj(\u0002\u0000 \u000ek��\"\u0006�C\u0000\u0000\u0000O]\u0004@ \u0006�\f\u0001\u000bA����x\u000bA\u0002tj\"\f \f(\u0002\u0000A\u0001j6\u0002\u0000 \u0001A\u0001j\"\u0001 \tG\r\u0000\u000b\f\u0001\u000b \u0002 \u000bA\u0002tj!\u0003 \b�C\u0000\u0000���!\u0005A����\u0007!\u000e\u000b \bA\u0002O\u0004@ \u0003(\u0002\u0000!\fA\u0001!\u0001\u0003@ \u0002 \u0001 \u000bjA\u0002tj\"\u0003 \u0003(\u0002\u0000 \fj\"\f6\u0002\u0000 \u0001A\u0001j\"\u0001 \bG\r\u0000\u000b\u000b \t \nA\u0001k\"\u0001L\u0004@\u0003@ \u0004 \u0001A\u0002t\"\u0003j \u0000 \u0003j(\u0002\u00006\u0002\u0000 \u0001A\u0001k\"\u0001 \tN\r\u0000\u000b\u000b \tA\u0000J\u0004@\u0003@ \u0004 \u0002\u0002 \u0005 \u0002 \tA\u0001k\"\u0001A\u0002t\"\bj(\u0002\u0000 \u000ek��\"\u0006�C\u0000\u0000\u0000O]\u0004@ \u0006�\f\u0001\u000bA����x\u000b \u000bjA\u0002tj\"\u0003(\u0002\u0000A\u0001k\"\nA\u0002tj \u0000 \bj(\u0002\u00006\u0002\u0000 \u0003 \n6\u0002\u0000 \tA\u0001J!\u0003 \u0001!\t \u0003\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b","export class Constants {\n\n    static DepthMapRange = 1 << 16;\n    static MemoryPageSize = 65536;\n    static BytesPerFloat = 4;\n    static BytesPerInt = 4;\n\n}\n","import SorterWasm from './sorter.wasm';\nimport { Constants } from '../Constants.js';\n\nfunction sortWorker(self) {\n\n    let wasmInstance;\n    let vertexCount;\n    let indexesOffset;\n    let positionsOffset;\n    let viewProjOffset;\n    let indexesOutOffset;\n    let sortBuffersOffset;\n    let wasmMemory;\n    let positions;\n    let countsZero;\n\n    let Constants;\n\n    function sort(vertexSortCount, vertexRenderCount, viewProj, cameraPosition) {\n\n        // console.time('WASM SORT');\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\n        const viewProjArray = new Int32Array(wasmMemory, viewProjOffset, 16);\n        for (let i = 0; i < 16; i++) {\n            viewProjArray[i] = Math.round(viewProj[i] * 1000.0);\n        }\n        const frequencies = new Uint32Array(wasmMemory, sortBuffersOffset + vertexCount * 4, Constants.DepthMapRange);\n        frequencies.set(countsZero);\n        wasmInstance.exports.sortIndexes(indexesOffset, positionsOffset, sortBuffersOffset, viewProjOffset,\n                                         indexesOutOffset, cameraPosition[0], cameraPosition[1],\n                                         cameraPosition[2], Constants.DepthMapRange, vertexSortCount, vertexRenderCount, vertexCount);\n\n        // console.timeEnd('WASM SORT');\n\n        self.postMessage({\n            'sortDone': true,\n            'vertexSortCount': vertexSortCount,\n            'vertexRenderCount': vertexRenderCount\n        });\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.positions) {\n            positions = e.data.positions;\n            const floatPositions = new Float32Array(positions);\n            const intPositions = new Int32Array(vertexCount * 3);\n            for (let i = 0; i < vertexCount * 3; i++) {\n                intPositions[i] = Math.round(floatPositions[i] * 1000.0);\n            }\n            new Int32Array(wasmMemory, positionsOffset, vertexCount * 3).set(intPositions);\n            self.postMessage({\n                'sortSetupComplete': true,\n            });\n        } else if (e.data.sort) {\n            const renderCount = e.data.sort.vertexRenderCount || 0;\n            const sortCount = e.data.sort.vertexSortCount || 0;\n            sort(sortCount, renderCount, e.data.sort.view, e.data.sort.cameraPosition, e.data.sort.inIndexBuffer);\n        } else if (e.data.init) {\n            // Yep, this is super hacky and gross :(\n            Constants = e.data.init.Constants;\n\n            vertexCount = e.data.init.vertexCount;\n\n            const INDEXES_BYTES_PER_ENTRY = Constants.BytesPerInt;\n            const POSITIONS_BYTES_PER_ENTRY = Constants.BytesPerFloat * 3;\n\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\n            const memoryBytesPerVertex = INDEXES_BYTES_PER_ENTRY + POSITIONS_BYTES_PER_ENTRY;\n            const memoryRequiredForVertices = vertexCount * memoryBytesPerVertex;\n            const memoryRequiredForSortBuffers = vertexCount * Constants.BytesPerInt * 2 +\n                                                 Constants.DepthMapRange * Constants.BytesPerInt * 2;\n            const extraMemory = Constants.MemoryPageSize * 32;\n            const totalRequiredMemory = memoryRequiredForVertices + memoryRequiredForSortBuffers + extraMemory;\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\n            const sorterWasmImport = {\n                module: {},\n                env: {\n                    memory: new WebAssembly.Memory({\n                        initial: totalPagesRequired * 2,\n                        maximum: totalPagesRequired * 3,\n                        shared: true,\n                    }),\n                }\n            };\n            WebAssembly.compile(sorterWasmBytes)\n            .then((wasmModule) => {\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\n            })\n            .then((instance) => {\n                wasmInstance = instance;\n                indexesOffset = 0;\n                positionsOffset = vertexCount * INDEXES_BYTES_PER_ENTRY;\n                viewProjOffset = positionsOffset + vertexCount * POSITIONS_BYTES_PER_ENTRY;\n                sortBuffersOffset = viewProjOffset + 16 * Constants.BytesPerFloat;\n                indexesOutOffset = sortBuffersOffset + vertexCount * Constants.BytesPerInt +\n                                   Constants.DepthMapRange * Constants.BytesPerInt * 2;\n                wasmMemory = sorterWasmImport.env.memory.buffer;\n                self.postMessage({\n                    'sortSetupPhase1Complete': true,\n                    'inIndexBuffer': wasmMemory,\n                    'inIndexOffset': 0,\n                    'outIndexBuffer': wasmMemory,\n                    'outIndexOffset': indexesOutOffset\n                });\n            });\n        }\n    };\n}\n\nexport function createSortWorker(vertexCount, splatBufferRowBytes) {\n    const worker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n\n    const sorterWasmBinaryString = atob(SorterWasm);\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\n    }\n\n    worker.postMessage({\n        'init': {\n            'sorterWasmBytes': sorterWasmBytes.buffer,\n            'vertexCount': vertexCount,\n            'splatBufferRowBytes': splatBufferRowBytes,\n            // Super hacky\n            'Constants': {\n                'BytesPerFloat': Constants.BytesPerFloat,\n                'BytesPerInt': Constants.BytesPerInt,\n                'DepthMapRange': Constants.DepthMapRange,\n                'MemoryPageSize': Constants.MemoryPageSize\n            }\n        }\n    });\n    return worker;\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from './OrbitControls.js';\nimport { PlyLoader } from './PlyLoader.js';\nimport { SplatLoader } from './SplatLoader.js';\nimport { SplatBuffer } from './SplatBuffer.js';\nimport { LoadingSpinner } from './LoadingSpinner.js';\nimport { Octree } from './octree/Octree.js';\nimport { createSortWorker } from './worker/SortWorker.js';\nimport { Constants } from './Constants.js';\n\nconst CENTER_COVARIANCE_DATA_TEXTURE_WIDTH = 4096;\nconst CENTER_COVARIANCE_DATA_TEXTURE_HEIGHT = 4096;\n\nconst COLOR_DATA_TEXTURE_WIDTH = 4096;\nconst COLOR_DATA_TEXTURE_HEIGHT = 2048;\n\nconst THREE_CAMERA_FOV = 60;\n\nexport class Viewer {\n\n    constructor(params = {}) {\n\n        if (!params.cameraUp) params.cameraUp = [0, 1, 0];\n        if (!params.initialCameraPosition) params.initialCameraPosition = [0, 10, 15];\n        if (!params.initialCameraLookAt) params.initialCameraLookAt = [0, 0, 0];\n        if (params.selfDrivenMode === undefined) params.selfDrivenMode = true;\n        if (params.useBuiltInControls === undefined) params.useBuiltInControls = true;\n        params.splatAlphaRemovalThreshold = params.splatAlphaRemovalThreshold || 0;\n\n        this.rootElement = params.rootElement;\n        this.usingExternalCamera = params.camera ? true : false;\n        this.usingExternalRenderer = params.renderer ? true : false;\n\n        this.cameraUp = new THREE.Vector3().fromArray(params.cameraUp);\n        this.initialCameraPosition = new THREE.Vector3().fromArray(params.initialCameraPosition);\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(params.initialCameraLookAt);\n\n        this.scene = params.scene;\n        this.renderer = params.renderer;\n        this.camera = params.camera;\n        this.useBuiltInControls = params.useBuiltInControls;\n        this.controls = null;\n        this.selfDrivenMode = params.selfDrivenMode;\n        this.splatAlphaRemovalThreshold = params.splatAlphaRemovalThreshold;\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\n\n        this.sortWorker = null;\n        this.vertexRenderCount = 0;\n        this.vertexSortCount = 0;\n\n        this.inIndexArray = null;\n\n        this.splatBuffer = null;\n        this.splatMesh = null;\n\n        this.octree = null;\n        this.octreeNodeMap = {};\n\n        this.sortRunning = false;\n        this.selfDrivenModeRunning = false;\n        this.splatRenderingInitialized = false;\n\n    }\n\n    getRenderDimensions(outDimensions) {\n        if (this.rootElement) {\n            outDimensions.x = this.rootElement.offsetWidth;\n            outDimensions.y = this.rootElement.offsetHeight;\n        } else {\n            this.renderer.getSize(outDimensions);\n        }\n    }\n\n    init() {\n\n        if (!this.rootElement && !this.usingExternalRenderer) {\n            this.rootElement = document.createElement('div');\n            this.rootElement.style.width = '100%';\n            this.rootElement.style.height = '100%';\n            document.body.appendChild(this.rootElement);\n        }\n\n        const renderDimensions = new THREE.Vector2();\n        this.getRenderDimensions(renderDimensions);\n\n        if (!this.usingExternalCamera) {\n            this.camera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 500);\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.lookAt(this.initialCameraLookAt);\n            this.camera.up.copy(this.cameraUp).normalize();\n        }\n\n        this.scene = this.scene || new THREE.Scene();\n\n        if (!this.usingExternalRenderer) {\n            this.renderer = new THREE.WebGLRenderer({\n                antialias: false\n            });\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n        }\n        this.setupRenderTargetCopyObjects();\n\n        if (this.useBuiltInControls) {\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n            this.controls.rotateSpeed = 0.5;\n            this.controls.maxPolarAngle = (0.9 * Math.PI) / 2;\n            this.controls.enableDamping = true;\n            this.controls.dampingFactor = 0.15;\n            this.controls.target.copy(this.initialCameraLookAt);\n        }\n\n        if (!this.usingExternalRenderer) {\n            const resizeObserver = new ResizeObserver(() => {\n                this.getRenderDimensions(renderDimensions);\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n            });\n            resizeObserver.observe(this.rootElement);\n            this.rootElement.appendChild(this.renderer.domElement);\n        }\n\n    }\n\n    updateSplatRenderTargetForRenderDimensions(width, height) {\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\n            format: THREE.RGBAFormat,\n            stencilBuffer: false,\n            depthBuffer: true,\n\n        });\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\n    }\n\n    setupRenderTargetCopyObjects() {\n        const uniforms = {\n            'sourceColorTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sourceDepthTexture': {\n                'type': 't',\n                'value': null\n            },\n        };\n        this.renderTargetCopyMaterial = new THREE.ShaderMaterial({\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            `,\n            fragmentShader: `\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = color;\n              }\n            `,\n            uniforms: uniforms,\n            depthWrite: false,\n            depthTest: false,\n            transparent: true,\n            blending: THREE.NormalBlending\n        });\n        this.renderTargetCopyMaterial.extensions.fragDepth = true;\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), this.renderTargetCopyMaterial);\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera( -1, 1, 1, -1, 0, 1 );\n    }\n\n    updateSplatMeshAttributes(colors, centerCovariances, vertexCount) {\n        const ELEMENTS_PER_TEXEL = 4;\n\n        const geometry = this.splatMesh.geometry;\n\n        const paddedCenterCovariances = new Float32Array(CENTER_COVARIANCE_DATA_TEXTURE_WIDTH *\n                                                         CENTER_COVARIANCE_DATA_TEXTURE_HEIGHT * ELEMENTS_PER_TEXEL);\n        for (let c = 0; c < vertexCount; c++) {\n            let destOffset = c * 12;\n            let srcOffset = c * 9;\n            for (let i = 0; i < 9; i++) {\n                paddedCenterCovariances[destOffset + i] = centerCovariances[srcOffset + i];\n            }\n        }\n        const centerCovarianceTexture = new THREE.DataTexture(paddedCenterCovariances, CENTER_COVARIANCE_DATA_TEXTURE_WIDTH,\n                                                              CENTER_COVARIANCE_DATA_TEXTURE_HEIGHT, THREE.RGBAFormat, THREE.FloatType);\n        centerCovarianceTexture.needsUpdate = true;\n        this.splatMesh.material.uniforms.centerCovarianceTexture.value = centerCovarianceTexture;\n\n        const paddedColors = new Float32Array(COLOR_DATA_TEXTURE_WIDTH * COLOR_DATA_TEXTURE_HEIGHT * ELEMENTS_PER_TEXEL);\n        paddedColors.set(colors);\n        const colorTexture = new THREE.DataTexture(paddedColors, COLOR_DATA_TEXTURE_WIDTH,\n                                                   COLOR_DATA_TEXTURE_HEIGHT, THREE.RGBAFormat, THREE.FloatType);\n        colorTexture.needsUpdate = true;\n        this.splatMesh.material.uniforms.colorTexture.value = colorTexture;\n\n        geometry.instanceCount = vertexCount;\n    }\n\n    updateSplatMeshIndexes(indexes, renderVertexCount) {\n        const geometry = this.splatMesh.geometry;\n\n        geometry.attributes.splatIndex.set(indexes);\n        geometry.attributes.splatIndex.needsUpdate = true;\n\n        geometry.instanceCount = renderVertexCount;\n    }\n\n    updateSplatMeshUniforms = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            const vertexCount = this.splatBuffer.getVertexCount();\n            if (vertexCount > 0) {\n                this.getRenderDimensions(renderDimensions);\n                this.splatMesh.material.uniforms.viewport.value.set(renderDimensions.x, renderDimensions.y);\n                this.cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\n                this.splatMesh.material.uniforms.focal.value.set(this.cameraFocalLength, this.cameraFocalLength);\n                this.splatMesh.material.uniformsNeedUpdate = true;\n            }\n        };\n\n    }();\n\n    loadFile(fileName) {\n        const loadingSpinner = new LoadingSpinner();\n        loadingSpinner.show();\n        return new Promise((resolve, reject) => {\n            let fileLoadPromise;\n            if (fileName.endsWith('.splat')) {\n                fileLoadPromise = new SplatLoader().loadFromFile(fileName);\n            } else if (fileName.endsWith('.ply')) {\n                fileLoadPromise = new PlyLoader().loadFromFile(fileName);\n            } else {\n                reject(new Error(`Viewer::loadFile -> File format not supported: ${fileName}`));\n            }\n            fileLoadPromise\n            .then((splatBuffer) => {\n\n                this.splatBuffer = splatBuffer;\n\n                this.splatBuffer.optimize(this.splatAlphaRemovalThreshold);\n                const vertexCount = this.splatBuffer.getVertexCount();\n                console.log(`Splat count: ${vertexCount}`);\n\n                this.splatBuffer.buildPreComputedBuffers();\n                this.splatMesh = this.buildMesh(this.splatBuffer);\n                this.splatMesh.frustumCulled = false;\n                this.splatMesh.renderOrder = 10;\n                this.updateSplatMeshUniforms();\n\n                this.octree = new Octree(8, 5000);\n                console.time('Octree build');\n                this.octree.processScene(splatBuffer);\n                console.timeEnd('Octree build');\n\n                let leavesWithVertices = 0;\n                let avgVertexCount = 0;\n                let maxVertexCount = 0;\n                let nodeCount = 0;\n\n                this.octree.visitLeaves((node) => {\n                    const vertexCount = node.data.indexes.length;\n                    if (vertexCount > 0) {\n                        this.octreeNodeMap[node.id] = node;\n                        avgVertexCount += vertexCount;\n                        maxVertexCount = Math.max(maxVertexCount, vertexCount);\n                        nodeCount++;\n                        leavesWithVertices++;\n                    }\n                });\n                console.log(`Octree leaves: ${this.octree.countLeaves()}`);\n                console.log(`Octree leaves with vertices:${leavesWithVertices}`);\n                avgVertexCount /= nodeCount;\n                console.log(`Avg vertex count per node: ${avgVertexCount}`);\n\n                this.vertexRenderCount = vertexCount;\n                loadingSpinner.hide();\n\n                this.sortWorker = createSortWorker(vertexCount, SplatBuffer.RowSizeBytes);\n                this.sortWorker.onmessage = (e) => {\n                    if (e.data.sortDone) {\n                        this.sortRunning = false;\n                        this.updateSplatMeshIndexes(this.outIndexArray, e.data.vertexRenderCount);\n                    } else if (e.data.sortCanceled) {\n                        this.sortRunning = false;\n                    } else if (e.data.sortSetupPhase1Complete) {\n                        console.log('Sorting web worker WASM setup complete.');\n                        const workerTransferPositionArray = new Float32Array(vertexCount * SplatBuffer.PositionComponentCount);\n                        this.splatBuffer.fillPositionArray(workerTransferPositionArray);\n                        this.sortWorker.postMessage({\n                            'positions': workerTransferPositionArray.buffer\n                        });\n                        this.outIndexArray = new Uint32Array(e.data.outIndexBuffer,\n                                                             e.data.outIndexOffset, this.splatBuffer.getVertexCount());\n                        this.inIndexArray = new Uint32Array(e.data.inIndexBuffer,\n                                                            e.data.inIndexOffset, this.splatBuffer.getVertexCount());\n                        for (let i = 0; i < vertexCount; i++) this.inIndexArray[i] = i;\n                    } else if (e.data.sortSetupComplete) {\n                        console.log('Sorting web worker ready.');\n                        const attributeData = this.getAttributeDataFromSplatBuffer(this.splatBuffer);\n                        this.updateSplatMeshIndexes(this.outIndexArray, this.splatBuffer.getVertexCount());\n                        this.updateSplatMeshAttributes(attributeData.colors,\n                                                       attributeData.centerCovariances, this.splatBuffer.getVertexCount());\n                        this.updateView(true, true);\n                        this.splatRenderingInitialized = true;\n                        resolve();\n                    }\n                };\n\n            })\n            .catch((e) => {\n                reject(new Error(`Viewer::loadFile -> Could not load file ${fileName}`));\n            });\n        });\n    }\n\n    addDebugMeshesToScene() {\n        this.debugRoot = this.createDebugMeshes();\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\n        this.scene.add(this.debugRoot);\n        this.scene.add(this.secondaryDebugRoot);\n    }\n\n    createDebugMeshes(renderOrder) {\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n        const debugMeshRoot = new THREE.Object3D();\n\n        const createMesh = (color, position) => {\n            let sphereMesh = new THREE.Mesh(sphereGeometry, this.buildDebugMaterial(color));\n            sphereMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(sphereMesh);\n            sphereMesh.position.fromArray(position);\n        };\n\n        createMesh(0xff0000, [-50, 0, 0]);\n        createMesh(0xff0000, [50, 0, 0]);\n        createMesh(0x00ff00, [0, 0, -50]);\n        createMesh(0x00ff00, [0, 0, 50]);\n        createMesh(0xffaa00, [5, 0, 5]);\n\n        return debugMeshRoot;\n    }\n\n    createSecondaryDebugMeshes(renderOrder) {\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n        const debugMeshRoot = new THREE.Object3D();\n\n        let boxColor = 0xBBBBBB;\n        const createMesh = (position) => {\n            let boxMesh = new THREE.Mesh(boxGeometry, this.buildDebugMaterial(boxColor));\n            boxMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(boxMesh);\n            boxMesh.position.fromArray(position);\n        };\n\n        let separation = 10;\n        createMesh([-separation, 0, -separation]);\n        createMesh([-separation, 0, separation]);\n        createMesh([separation, 0, -separation]);\n        createMesh([separation, 0, separation]);\n\n        return debugMeshRoot;\n    }\n\n    buildDebugMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n\n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: false,\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.FrontSide\n        });\n        material.extensions.fragDepth = true;\n\n        return material;\n    }\n\n\n    gatherSceneNodes = function() {\n\n        const nodeRenderList = [];\n        const tempVectorYZ = new THREE.Vector3();\n        const tempVectorXZ = new THREE.Vector3();\n        const tempVector = new THREE.Vector3();\n        const tempMatrix4 = new THREE.Matrix4();\n        const renderDimensions = new THREE.Vector3();\n        const forward = new THREE.Vector3(0, 0, -1);\n\n        const tempMax = new THREE.Vector3();\n        const nodeSize = (node) => {\n            return tempMax.copy(node.max).sub(node.min).length();\n        };\n\n        const MaximumDistanceToSort = 125;\n\n        return function(gatherAllNodes) {\n\n            this.getRenderDimensions(renderDimensions);\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / this.cameraFocalLength);\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / this.cameraFocalLength);\n            const cosFovXOver2 = Math.cos(fovXOver2);\n            const cosFovYOver2 = Math.cos(fovYOver2);\n            tempMatrix4.copy(this.camera.matrixWorld).invert();\n\n            let nodeRenderCount = 0;\n            let verticesToCopy = 0;\n            const nodeCount = this.octree.nodesWithIndexes.length;\n            for (let i = 0; i < nodeCount; i++) {\n                const node = this.octree.nodesWithIndexes[i];\n                tempVector.copy(node.center).sub(this.camera.position);\n                const distanceToNode = tempVector.length();\n                tempVector.normalize();\n                tempVector.transformDirection(tempMatrix4);\n\n                tempVectorYZ.copy(tempVector).setX(0).normalize();\n                tempVectorXZ.copy(tempVector).setY(0).normalize();\n\n                const cameraAngleXZDot = forward.dot(tempVectorXZ);\n                const cameraAngleYZDot = forward.dot(tempVectorYZ);\n\n                const ns = nodeSize(node);\n                const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .4);\n                const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .4);\n                if (!gatherAllNodes && ((outOfFovX || outOfFovY) && distanceToNode > ns)) {\n                    continue;\n                }\n                verticesToCopy += node.data.indexes.length;\n                nodeRenderList[nodeRenderCount] = node;\n                node.data.distanceToNode = distanceToNode;\n                nodeRenderCount++;\n            }\n\n            nodeRenderList.length = nodeRenderCount;\n            nodeRenderList.sort((a, b) => {\n                if (a.data.distanceToNode > b.data.distanceToNode) return 1;\n                else return -1;\n            });\n\n            this.vertexRenderCount = verticesToCopy;\n            this.vertexSortCount = 0;\n            let currentByteOffset = 0;\n            for (let i = 0; i < nodeRenderCount; i++) {\n                const node = nodeRenderList[i];\n                const shouldSort = node.data.distanceToNode <= MaximumDistanceToSort;\n                if (shouldSort) {\n                    this.vertexSortCount += node.data.indexes.length;\n                }\n                const windowSizeInts = node.data.indexes.length;\n                let destView = new Uint32Array(this.inIndexArray.buffer, currentByteOffset, windowSizeInts);\n                destView.set(node.data.indexes);\n                currentByteOffset += windowSizeInts * Constants.BytesPerInt;\n            }\n\n        };\n\n    }();\n\n    start() {\n        if (this.selfDrivenMode) {\n            requestAnimationFrame(this.selfDrivenUpdateFunc);\n            this.selfDrivenModeRunning = true;\n        } else {\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\n        }\n    }\n\n    fps = function() {\n\n        let lastCalcTime = performance.now() / 1000;\n        let frameCount = 0;\n\n        return function() {\n            const currentTime = performance.now() / 1000;\n            const calcDelta = currentTime - lastCalcTime;\n            if (calcDelta >= 1.0) {\n                console.log('FPS: ' + frameCount);\n                frameCount = 0;\n                lastCalcTime = currentTime;\n            } else {\n                frameCount++;\n            }\n        };\n\n    }();\n\n    updateForRendererSizeChanges = function() {\n\n        const lastRendererSize = new THREE.Vector2();\n        const currentRendererSize = new THREE.Vector2();\n\n        return function() {\n            this.renderer.getSize(currentRendererSize);\n            if (currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\n                if (!this.usingExternalCamera) {\n                    this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\n                    this.camera.updateProjectionMatrix();\n                }\n                if (this.splatRenderingInitialized) {\n                    this.updateSplatMeshUniforms();\n                    this.updateSplatRenderTargetForRenderDimensions(currentRendererSize.x, currentRendererSize.y);\n                }\n                lastRendererSize.copy(currentRendererSize);\n            }\n        };\n\n    }();\n\n    selfDrivenUpdate() {\n        if (this.selfDrivenMode) {\n            requestAnimationFrame(this.selfDrivenUpdateFunc);\n        }\n        this.update();\n        this.render();\n    }\n\n    update() {\n        if (this.controls) {\n            this.controls.update();\n        }\n        this.updateView();\n        this.updateForRendererSizeChanges();\n        // this.fps();\n    }\n\n    render() {\n        this.renderer.autoClear = false;\n        this.renderer.setClearColor(0.0, 0.0, 0.0, 0.0);\n\n        // A more complex rendering sequence is required if you want to render \"normal\" Three.js\n        // objects along with the splats\n        if (this.scene.children.length > 0) {\n            this.renderer.setRenderTarget(this.splatRenderTarget);\n            this.renderer.clear(true, true, true);\n            this.renderer.getContext().colorMask(false, false, false, false);\n            this.renderer.render(this.scene, this.camera);\n            this.renderer.getContext().colorMask(true, true, true, true);\n            this.renderer.render(this.splatMesh, this.camera);\n\n            this.renderer.setRenderTarget(null);\n            this.renderer.clear(true, true, true);\n\n            this.renderer.render(this.scene, this.camera);\n            this.renderTargetCopyMaterial.uniforms.sourceColorTexture.value = this.splatRenderTarget.texture;\n            this.renderTargetCopyMaterial.uniforms.sourceDepthTexture.value = this.splatRenderTarget.depthTexture;\n            this.renderer.render(this.renderTargetCopyQuad, this.renderTargetCopyCamera);\n        } else {\n            this.renderer.clear(true, true, true);\n            this.renderer.render(this.splatMesh, this.camera);\n        }\n    }\n\n    updateView = function() {\n\n        const tempMatrix = new THREE.Matrix4();\n        const cameraPositionArray = [];\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\n        const lastSortViewPos = new THREE.Vector3();\n        const sortViewOffset = new THREE.Vector3();\n\n        return function(force = false, gatherAllNodes = false) {\n            if (!force) {\n                sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\n                let needsRefreshForRotation = false;\n                let needsRefreshForPosition = false;\n                if (sortViewDir.dot(lastSortViewDir) <= 0.95) needsRefreshForRotation = true;\n                if (sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length() >= 1.0) needsRefreshForPosition = true;\n                if (!needsRefreshForRotation && !needsRefreshForPosition) return;\n            }\n\n            tempMatrix.copy(this.camera.matrixWorld).invert();\n            tempMatrix.premultiply(this.camera.projectionMatrix);\n            cameraPositionArray[0] = this.camera.position.x;\n            cameraPositionArray[1] = this.camera.position.y;\n            cameraPositionArray[2] = this.camera.position.z;\n\n            if (!this.sortRunning) {\n                this.gatherSceneNodes(gatherAllNodes);\n                this.sortRunning = true;\n                this.sortWorker.postMessage({\n                    sort: {\n                        'view': tempMatrix.elements,\n                        'cameraPosition': cameraPositionArray,\n                        'vertexRenderCount': this.vertexRenderCount,\n                        'vertexSortCount': this.vertexSortCount,\n                        'inIndexBuffer': this.inIndexArray.buffer\n                    }\n                });\n                lastSortViewPos.copy(this.camera.position);\n                lastSortViewDir.copy(sortViewDir);\n            }\n        };\n\n    }();\n\n    buildMaterial() {\n\n        const vertexShaderSource = `\n            #include <common>\n            precision mediump float;\n\n            attribute uint splatIndex;\n            attribute vec4 splatColor;\n            attribute mat3 splatCenterCovariance;\n\n            uniform sampler2D centerCovarianceTexture;\n            uniform sampler2D colorTexture;\n            uniform vec2 focal;\n            uniform vec2 viewport;\n\n            uniform vec2 centerCovarianceTextureSize;\n            uniform vec2 colorTextureSize;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float covarianceD = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n                samplerUV.y = float(floor(covarianceD)) / dimensions.y;\n                samplerUV.x = fract(covarianceD);\n                return samplerUV;\n            }\n\n            void main () {\n\n                vec4 sampledCenterCovarianceA = texture2D(centerCovarianceTexture, getDataUV(3, 0, centerCovarianceTextureSize));\n                vec4 sampledCenterCovarianceB = texture2D(centerCovarianceTexture, getDataUV(3, 1, centerCovarianceTextureSize));\n                vec4 sampledCenterCovarianceC = texture2D(centerCovarianceTexture, getDataUV(3, 2, centerCovarianceTextureSize));\n             \n                vec3 splatCenter = sampledCenterCovarianceA.xyz;\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCenterCovarianceA.w, sampledCenterCovarianceB.xy);\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCenterCovarianceB.zw, sampledCenterCovarianceC.r);\n\n                vec2 colorUV = vec2(0.0, 0.0);\n                float colorD = float(splatIndex * uint(4)) / 4.0 / colorTextureSize.x;\n                colorUV.y = float(int(colorD)) / colorTextureSize.y;\n                colorUV.x = fract(colorD);\n                vColor = texture2D(colorTexture, colorUV);\n                vPosition = position.xy * 2.0;\n\n                vec4 viewCenter = viewMatrix * vec4(splatCenter, 1.0);\n                vec4 clipCenter = projectionMatrix * viewCenter;\n\n                float bounds = 1.2 * clipCenter.w;\n                if (clipCenter.z < -clipCenter.w || clipCenter.x < -bounds || clipCenter.x > bounds\n                    || clipCenter.y < -bounds || clipCenter.y > bounds) {\n                    gl_Position = vec4(0.0, 0.0, 2.0, 1.0);\n                    return;\n                }\n\n                // Compute the 2D covariance matrix from the upper-right portion of the 3D covariance matrix\n                mat3 Vrk = mat3(\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n                );\n                mat3 J = mat3(\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) / (viewCenter.z * viewCenter.z),\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) / (viewCenter.z * viewCenter.z),\n                    0., 0., 0.\n                );\n                mat3 W = transpose(mat3(viewMatrix));\n                mat3 T = W * J;\n                mat3 cov2Dm = transpose(T) * Vrk * T;\n                cov2Dm[0][0] += 0.3;\n                cov2Dm[1][1] += 0.3;\n\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n                // need cov2Dm[1][0] because it is a symetric matrix.\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n                // so that we can determine the 2D basis for the splat. This is done using the method described\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n                //\n                // This is a different approach than in the original work at INRIA. In that work they compute the\n                // max extents of the 2D covariance matrix in screen space to form an axis aligned bounding rectangle\n                // which forms the geometry that is actually rasterized. They then use the inverse 2D covariance\n                // matrix (called 'conic') to determine fragment opacity.\n                float a = cov2Dv.x;\n                float d = cov2Dv.z;\n                float b = cov2Dv.y;\n                float D = a * d - b * b;\n                float trace = a + d;\n                float traceOver2 = 0.5 * trace;\n                float term2 = sqrt(trace * trace / 4.0 - D);\n                float eigenValue1 = traceOver2 + term2;\n                float eigenValue2 = traceOver2 - term2;\n\n                const float maxSplatSize = 512.0;\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n                vec2 eigenVector2 = normalize(vec2(b, eigenValue2 - a));\n                vec2 basisVector1 = eigenVector1 * min(sqrt(2.0 * eigenValue1), maxSplatSize);\n                vec2 basisVector2 = eigenVector2 * min(sqrt(2.0 * eigenValue2), maxSplatSize);\n\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) / viewport * 2.0;\n\n                gl_Position = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n\n            }`;\n\n        const fragmentShaderSource = `\n            #include <common>\n            precision mediump float;\n\n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            void main () {\n                // compute the squared distance from the center of the splat to the current fragment in the\n                // splat's local space.\n                float A = -dot(vPosition, vPosition);\n                if (A < -4.0) discard;\n                vec3 color = vColor.rgb;\n                A = exp(A) * vColor.a;\n                gl_FragColor = vec4(A * color.rgb, A);\n            }`;\n\n        const uniforms = {\n            'centerCovarianceTexture': {\n                'type': 't',\n                'value': null\n            },\n            'colorTexture': {\n                'type': 't',\n                'value': null\n            },\n            'focal': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'debugColor': {\n                'type': 'v3',\n                'value': new THREE.Color()\n            },\n            'centerCovarianceTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(CENTER_COVARIANCE_DATA_TEXTURE_WIDTH, CENTER_COVARIANCE_DATA_TEXTURE_HEIGHT)\n            },\n            'colorTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(COLOR_DATA_TEXTURE_WIDTH, COLOR_DATA_TEXTURE_HEIGHT)\n            }\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            alphaTest: 1.0,\n            blending: THREE.CustomBlending,\n            blendEquation: THREE.AddEquation,\n            blendSrc: THREE.OneMinusDstAlphaFactor,\n            blendDst: THREE.OneFactor,\n            blendSrcAlpha: THREE.OneMinusDstAlphaFactor,\n            blendDstAlpha: THREE.OneFactor,\n            depthTest: true,\n            depthWrite: false,\n            side: THREE.DoubleSide\n        });\n\n        return material;\n    }\n\n    buildGeomtery(splatBuffer) {\n\n        const vertexCount = splatBuffer.getVertexCount();\n\n        const baseGeometry = new THREE.BufferGeometry();\n\n        const positionsArray = new Float32Array(6 * 3);\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\n        baseGeometry.setAttribute('position', positions);\n        positions.setXYZ(2, -1.0, 1.0, 0.0);\n        positions.setXYZ(1, -1.0, -1.0, 0.0);\n        positions.setXYZ(0, 1.0, 1.0, 0.0);\n        positions.setXYZ(5, -1.0, -1.0, 0.0);\n        positions.setXYZ(4, 1.0, -1.0, 0.0);\n        positions.setXYZ(3, 1.0, 1.0, 0.0);\n        positions.needsUpdate = true;\n\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\n\n        const splatIndexArray = new Uint32Array(vertexCount);\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\n        geometry.setAttribute('splatIndex', splatIndexes);\n\n        const splatColorsArray = new Float32Array(vertexCount * 4);\n        const splatColors = new THREE.InstancedBufferAttribute(splatColorsArray, 4, false);\n        splatColors.setUsage(THREE.DynamicDrawUsage);\n        geometry.setAttribute('splatColor', splatColors);\n\n        const splatCentersArray = new Float32Array(vertexCount * 9);\n        const splatCenters = new THREE.InstancedBufferAttribute(splatCentersArray, 9, false);\n        splatCenters.setUsage(THREE.DynamicDrawUsage);\n        geometry.setAttribute('splatCenterCovariance', splatCenters);\n\n        return geometry;\n    }\n\n    buildMesh(splatBuffer) {\n        const geometry = this.buildGeomtery(splatBuffer);\n        const material = this.buildMaterial();\n        const mesh = new THREE.Mesh(geometry, material);\n        return mesh;\n    }\n\n    getAttributeDataFromSplatBuffer(splatBuffer) {\n\n        const vertexCount = splatBuffer.getVertexCount();\n\n        const splatArray = new Float32Array(splatBuffer.getBufferData());\n        const pCovarianceArray = new Float32Array(splatBuffer.getPrecomputedCovarianceBufferData());\n        const pColorArray = new Float32Array(splatBuffer.getPrecomputedColorBufferData());\n        const color = new Float32Array(vertexCount * 4);\n        const centerCov = new Float32Array(vertexCount * 9);\n\n        for (let i = 0; i < vertexCount; i++) {\n\n            const centerCovBase = 9 * i;\n            const pCovarianceBase = 6 * i;\n            const colorBase = 4 * i;\n            const pcColorBase = 4 * i;\n            const splatArrayBase = SplatBuffer.RowSizeFloats * i;\n\n            centerCov[centerCovBase] = splatArray[splatArrayBase];\n            centerCov[centerCovBase + 1] = splatArray[splatArrayBase + 1];\n            centerCov[centerCovBase + 2] = splatArray[splatArrayBase + 2];\n\n            color[colorBase] = pColorArray[pcColorBase];\n            color[colorBase + 1] = pColorArray[pcColorBase + 1];\n            color[colorBase + 2] = pColorArray[pcColorBase + 2];\n            color[colorBase + 3] = pColorArray[pcColorBase + 3];\n\n            centerCov[centerCovBase + 3] = pCovarianceArray[pCovarianceBase];\n            centerCov[centerCovBase + 4] = pCovarianceArray[pCovarianceBase + 1];\n            centerCov[centerCovBase + 5] = pCovarianceArray[pCovarianceBase + 2];\n            centerCov[centerCovBase + 6] = pCovarianceArray[pCovarianceBase + 3];\n            centerCov[centerCovBase + 7] = pCovarianceArray[pCovarianceBase + 4];\n            centerCov[centerCovBase + 8] = pCovarianceArray[pCovarianceBase + 5];\n        }\n\n        return {\n            'colors': color,\n            'centerCovariances': centerCov\n        };\n\n    };\n}\n"],"names":["THREE","Ray","Plane","MathUtils","EventDispatcher","Vector3","MOUSE","TOUCH","Quaternion","Spherical","Vector2"],"mappings":"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"}